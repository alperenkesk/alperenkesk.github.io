<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Siber GÃ¼venlik on Alperen Keskin</title>
    <link>https://alperenkesk.github.io/tags/siber-g%C3%BCvenlik/</link>
    <description>Recent content in Siber GÃ¼venlik on Alperen Keskin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr</language>
    <lastBuildDate>Sat, 12 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://alperenkesk.github.io/tags/siber-g%C3%BCvenlik/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2FA Bypass Teknikleri</title>
      <link>https://alperenkesk.github.io/posts/pentest-teknikleri/2fa-bypass-teknikleri/</link>
      <pubDate>Sat, 12 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://alperenkesk.github.io/posts/pentest-teknikleri/2fa-bypass-teknikleri/</guid>
      
      <description>&lt;p&gt;Penetrasyon testleri ve bug bounty sÄ±rasÄ±nda en sÄ±k karÅŸÄ±laÅŸtÄ±ÄŸÄ±m gÃ¼venlik Ã¶nlemlerinden biri 2FA, yani iki faktÃ¶rlÃ¼ kimlik doÄŸrulama. GÃ¼zel bir gÃ¼venlik katmanÄ± ama yanlÄ±ÅŸ ya da eksik uygulandÄ±ÄŸÄ±nda aÅŸÄ±lmasÄ± da bir o kadar mÃ¼mkÃ¼n hale geliyor. Bu yazÄ±da, pratikte karÅŸÄ±laÅŸtÄ±ÄŸÄ±m veya testlerde denediÄŸim bazÄ± 2FA atlatma yÃ¶ntemlerini paylaÅŸmak istiyorum.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-response-manipulation-yanÄ±t-manipÃ¼lasyonu&#34;&gt;1. Response Manipulation (YanÄ±t ManipÃ¼lasyonu)&lt;/h3&gt;
&lt;p&gt;Bazen uygulama sunucusundan dÃ¶nen yanÄ±t, istemci tarafÄ±nda kontrolsÃ¼z ÅŸekilde yorumlanÄ±yor. Ã–rneÄŸin:&lt;/p&gt;
&lt;p&gt;Orijinal YanÄ±t:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authentication failed&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Bu yanÄ±tÄ± intercept edip ÅŸÃ¶yle deÄŸiÅŸtirdiÄŸinizde:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Yi IoT GÃ¼venlik KameralarÄ±nda Uzaktan Kod Ã‡alÄ±ÅŸtÄ±rma (RCE) Zafiyeti Analizi</title>
      <link>https://alperenkesk.github.io/posts/iot-hacking/yi-iot-rce-zafiyet-analizi/</link>
      <pubDate>Mon, 23 Jun 2025 21:00:00 +0300</pubDate>
      
      <guid>https://alperenkesk.github.io/posts/iot-hacking/yi-iot-rce-zafiyet-analizi/</guid>
      
      <description>&lt;h2 id=&#34;yi-iot-gÃ¼venlik-kameralarÄ±nda-uzaktan-kod-Ã§alÄ±ÅŸtÄ±rma-rce-zafiyeti&#34;&gt;Yi IoT GÃ¼venlik KameralarÄ±nda Uzaktan Kod Ã‡alÄ±ÅŸtÄ±rma (RCE) Zafiyeti&lt;/h2&gt;
&lt;p&gt;AkÄ±llÄ± ev sistemlerinde kullanÄ±lan gÃ¼venlik kameralarÄ±, evimizi daha gÃ¼venli hale getirmek iÃ§in tasarlansa da bazen bu cihazlar kendileri ciddi bir gÃ¼venlik riski haline gelebiliyor. Bu yazÄ±da, Yi IoT marka IP kameralarÄ±nda tespit edilen ve GitHubâ€™da &lt;a href=&#34;https://github.com/Yasha-ops/RCE-YiIOT&#34;&gt;Yasha-ops&lt;/a&gt; tarafÄ±ndan yayÄ±mlanan bir &lt;strong&gt;uzaktan kod Ã§alÄ±ÅŸtÄ±rma (RCE)&lt;/strong&gt; zafiyetini inceleyeceÄŸiz.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-zafiyetin-Ã¶zeti&#34;&gt;ğŸš¨ Zafiyetin Ã–zeti&lt;/h2&gt;
&lt;p&gt;Yi IoT kameralarÄ± Ã¼zerinde Ã§alÄ±ÅŸan iki servis, saldÄ±rganlara cihaz Ã¼zerinde tam yetkiyle iÅŸlem yapma imkÃ¢nÄ± tanÄ±maktadÄ±r:&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Nuclei ile Zafiyet Tespiti</title>
      <link>https://alperenkesk.github.io/posts/nuclei-zafiyet/</link>
      <pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>https://alperenkesk.github.io/posts/nuclei-zafiyet/</guid>
      
      <description>&lt;h1 id=&#34;nuclei-ile-zafiyet-tespiti&#34;&gt;Nuclei ile Zafiyet Tespiti&lt;/h1&gt;
&lt;p&gt;Nuclei, ProjectDiscovery ekibi tarafÄ±ndan geliÅŸtirilen, gÃ¼venlik aÃ§Ä±ÄŸÄ± taramasÄ±, keÅŸif ve penetrasyon testlerini otomatikleÅŸtiren gÃ¼Ã§lÃ¼ bir aÃ§Ä±k kaynak aracÄ±dÄ±r. Go diliyle yazÄ±lan bu araÃ§, TCP, DNS, HTTP gibi farklÄ± protokoller Ã¼zerinden hÄ±zlÄ± ve esnek zafiyet taramalarÄ± yapabilir. Ã–zelleÅŸtirilebilir yapÄ±sÄ± sayesinde hem geliÅŸtiriciler hem de gÃ¼venlik araÅŸtÄ±rmacÄ±larÄ± iÃ§in popÃ¼lerdir.&lt;/p&gt;
&lt;p&gt;Nuclei&amp;rsquo;nin en bÃ¼yÃ¼k avantajlarÄ±ndan biri, sÃ¼rekli gÃ¼ncellenen zafiyet ÅŸablonlarÄ±yla yaygÄ±n gÃ¼venlik aÃ§Ä±klarÄ±nÄ± hÄ±zlÄ±ca tespit edebilmesidir. AyrÄ±ca, diÄŸer gÃ¼venlik araÃ§larÄ±yla entegrasyon saÄŸlayarak otomatik gÃ¼venlik testlerini iÅŸ akÄ±ÅŸlarÄ±na dahil etmek isteyenler iÃ§in ideal bir Ã§Ã¶zÃ¼m sunar.&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
